import { useState, useEffect, useRef } from 'react';
import './MetronomStopper.css'; // üí° Ne felejtsd el import√°lni a CSS-t!

export default function Metronom() {
  const [bpm, setBpm] = useState(120); // √útem per perc
  const [isRunning, setIsRunning] = useState(false); // Fut-e a metron√≥m
  const [beat, setBeat] = useState(0); // Aktu√°lis √ºt√©s
  const [beatsPerMeasure, setBeatsPerMeasure] = useState(4); // H√°ny √ºt√©s 1 ciklusban

  const audioRef = useRef(new Audio('/click.ogg')); // A hangf√°jl
  const intervalIdRef = useRef(null); // Az id≈ëz√≠t≈ë az √ºt√©sekhez

  const beatInterval = 60000 / bpm; // Egy √ºt√©s hossza ms-ben

  // Hang preload
  useEffect(() => {
    audioRef.current.load();
  }, []);

  // Metron√≥m logika
  useEffect(() => {
    if (isRunning) {
      intervalIdRef.current = setInterval(() => {
        audioRef.current.currentTime = 0;
        audioRef.current.play();
        setBeat((prevBeat) => (prevBeat + 1) % beatsPerMeasure);
      }, beatInterval);
    } else {
      clearInterval(intervalIdRef.current);
    }

    return () => clearInterval(intervalIdRef.current);
  }, [isRunning, bpm, beatsPerMeasure]);

  // Start/Stop gomb logik√°ja
  const toggleMetronome = () => {
    if (isRunning) {
      clearInterval(intervalIdRef.current);
      setBeat(0); // reset
    }
    setIsRunning(!isRunning);
  };

  return (
    <div className="container">
      <h2>üéµ Metron√≥m</h2>

      {/* BPM be√°ll√≠t√°s */}
      <div style={{ marginBottom: '1rem' }}>
        <label htmlFor="bpm">BPM:</label>
        <input
          id="bpm"
          type="number"
          min="40"
          max="300"
          value={bpm}
          onChange={(e) => setBpm(Number(e.target.value))}
        />
      </div>

      {/* √útemciklus be√°ll√≠t√°sa */}
      <div style={{ marginBottom: '1rem' }}>
        <label htmlFor="measure">√útem/ciklus:</label>
        <input
          id="measure"
          type="number"
          min="1"
          max="12"
          value={beatsPerMeasure}
          onChange={(e) => setBeatsPerMeasure(Number(e.target.value))}
        />
      </div>

      {/* Vizu√°lis k√∂r */}
      <div className={`circle ${beat === 0 ? 'green' : ''}`}></div>

      {/* Aktu√°lis √ºt√©s */}
      <p style={{ fontSize: '1.2rem', fontFamily: 'monospace', marginBottom: '1rem' }}>
        √út√©s: {beat + 1}
      </p>

      {/* Start / Stop */}
      <button onClick={toggleMetronome} className={isRunning ? 'stop' : 'start'}>
        {isRunning ? 'Stop' : 'Start'}
      </button>
    </div>
  );
}
